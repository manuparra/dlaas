proxy:
  secretToken: "6a506704db4977f86e5d7da55a3716c6eb568c58e6f41074a05431fa3fae4b1a"
  service:
    type: NodePort
    nodePorts:
      http: 30010

hub:
  baseUrl: /dl/
  extraConfig:
    authConf.py: |
      def pre_spawn_hook(authenticator, spawner, auth_state):
         spawner.environment['ACCESS_TOKEN'] = auth_state['access_token']
         spawner.environment['REFRESH_TOKEN'] = auth_state['refresh_token']
         spawner.environment['OAUTH_INSPECTION_ENDPOINT'] = authenticator.userdata_url.replace('https://', '')
      c.OIDCAuthenticator.pre_spawn_hook = pre_spawn_hook
    logoConfig: |
      import urllib.request
      urllib.request.urlretrieve("https://drive.google.com/uc?export=download&id=1DH8vbKpTcueOl_druObkmFQSOJlo-8Zd", "iaalogo.png")
      c.JupyterHub.logo_file = '/srv/jupyterhub/iaalogo.png'
    msgConfig: |
      c.JupyterHub.template_vars = {'announcement_login': 'Welcome to the ...'}
  args:
    - "authstatejupyterhub"
    - "--config"
    - "/usr/local/etc/jupyterhub/jupyterhub_config.py"
		
  config:
    OIDCAuthenticator:
      client_id: "<redacted>"
      client_secret: "<redacted>"
      oidc_issuer: https://iam-escape.cloud.cnaf.infn.it/
      oauth_callback_url: "https://srcdev.skatelescope.org/jupyterhub-dev/hub/oauth_callback"
      authorize_url: https://iam-escape.cloud.cnaf.infn.it/authorize
      token_url: https://iam-escape.cloud.cnaf.infn.it/token
      userdata_url: https://iam-escape.cloud.cnaf.infn.it/userinfo
      scope:
        - openid
        - profile
        - email
        # - offline_access
      username_key: preferred_username
      exchange_tokens:
        - https://wlcg.cern.ch/jwt/v1/any
      verify_aud: true
      allowed_audience:
        - https://wlcg.cern.ch/jwt/v1/any
    JupyterHub:
      authenticator_class: oidcauthenticator.OIDCAuthenticator

singleuser:
  defaultUrl: "/lab/tree/dlaas/dlaccessexample.ipynb"
  cpu:
    limit: 2
    guarantee: 1
  memory:
    limit: 2G
    guarantee: 2G
  storage:
    type: dynamic
    capacity: 3Gi
    dynamic:
      storageClass: cinder
  image:
    name: gitlab-registry.cern.ch/escape-wp2/docker-images/jupyterhub
    tag: 7b71de97
    pullPolicy: IfNotPresent
  profileList:
     - display_name: "DataLake as a Service with RUCIO SKAO DL access"
       description: "Environment for SKAO DL testbed Access"
       default: true
       kubespawner_override:
          image: gitlab-registry.cern.ch/escape-wp2/docker-images/datalake-singleuser:c9dd9371
	  
  extraEnv:
      RUCIO_BASE_URL: "https://srcdev.skatelescope.org/rucio-dev"
      RUCIO_AUTH_URL: "https://srcdev.skatelescope.org/rucio-dev"
      RUCIO_DISPLAY_NAME: "SKAO Data Lake"
      RUCIO_NAME: "skao"
      RUCIO_DEFAULT_INSTANCE: "skao"
      RUCIO_OAUTH_ID: "https://wlcg.cern.ch/jwt/v1/any"
      RUCIO_MODE: "replica"
      RUCIO_DESTINATION_RSE: "SPSRC_STORM"
      RUCIO_RSE_MOUNT_PATH: "/data/"
      RUCIO_PATH_BEGINS_AT: "1"
      RUCIO_WILDCARD_ENABLED: "1"
      RUCIO_REPLICATION_RULE_LIFETIME_DAYS: "7"
      RUCIO_OIDC_AUTH: "file"
      RUCIO_OIDC_FILE_NAME: "/tmp/oauth.token"
      RUCIO_DEFAULT_AUTH_TYPE: "oidc"
      OAUTH2_TOKEN: "FILE:/tmp/eos_oauth.token"
      RUCIO_CA_CERT: ""
  cmd:
    - /bin/bash
    - /usr/local/bin/datalake-config/configure-datalake.sh
    - configure.sh
    - jupyterhub-singleuser
  storage:
    extraVolumes:
      - name: config-script
        configMap:
          name: jupyter-config-script
    extraVolumeMounts:
      - name: config-script
        mountPath: /usr/local/bin/datalake-config
  lifecycleHooks:
      postStart:
        exec:
          command:
             - "sh"
             - "-c"
             - >
               test -d dlaas || git clone https://github.com/manuparra/dlaas.git
